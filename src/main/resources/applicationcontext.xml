<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:rabbit="http://www.springframework.org/schema/rabbit"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans  
                        http://www.springframework.org/schema/beans/spring-beans.xsd  
                        http://www.springframework.org/schema/mvc  
                        http://www.springframework.org/schema/mvc/spring-mvc.xsd 
                        http://www.springframework.org/schema/rabbit 
                        http://www.springframework.org/schema/rabbit/spring-rabbit-1.7.xsd    
                        http://www.springframework.org/schema/context  
                        http://www.springframework.org/schema/context/spring-context.xsd">



	<!-- 定义rabbitMQ的连接工厂 -->
	<rabbit:connection-factory id="connectionFactory"
		host="127.0.0.1" port="5672" username="user_mq" password="123456"
		virtual-host="/vhost_mq" />


	<!-- 定义rabbit模板，制定连接工厂以及定义exchange -->
	<rabbit:template id="amqpTemplate" connection-factory="connectionFactory"
		exchange="fanoutExchange" />

	<!-- MQ的管理，包括队列，交换机声明等 -->
	<rabbit:admin connection-factory="connectionFactory" />

	<!-- queue 队列声明 -->
	<rabbit:queue name="myQueue" auto-declare="true" durable="true"/>


	<!-- 定义交换机-->
	<rabbit:fanout-exchange name="fanoutExchange" auto-declare="true">
	<!-- 将队列绑定到交换机 -->
		<rabbit:bindings>
			<rabbit:binding queue="myQueue"/>
		</rabbit:bindings>
	</rabbit:fanout-exchange>

	<!--定义监听容器，当收到消息的时候会执行容器内的配置-->
	<rabbit:listener-container connection-factory="connectionFactory">
		<!-- 定义到底哪个类里面的什么方法处理收到的消息 -->
		<rabbit:listener ref="foo" method="listen" queue-names="myQueue"/>
	</rabbit:listener-container>
	
	<!--定义消费者 -->
	<bean id="foo" class="com.bsoft.rabbitmq.spring.MyConsumer"/>


</beans>  